import React, { useState, useEffect } from 'react';
import { MapPin, Coffee, Utensils, Bed, Camera, Car, Bus, X, Plus, Star, Map, List } from 'lucide-react';

// 가상 지도 컴포넌트
const VirtualMap = ({ places, onPlaceSelect }) => {
  const [selectedPlace, setSelectedPlace] = useState(null);

  // 제주도 중심 좌표 (가상)
  const jejuCenter = { lat: 33.3846, lng: 126.5531 };

  // 가상 장소 데이터 (실제 앱에서는 API나 데이터베이스에서 가져옴)
  const samplePlaces = [
    {
      id: 'place-1',
      name: '성산일출봉',
      type: 'tourist_attraction',
      lat: 33.4589,
      lng: 126.9380,
      tags: ['관광', '제주', '자연'],
      address: '제주특별자치도 서귀포시 성산읍',
      popularity: 234
    },
    {
      id: 'place-2',
      name: '제주 흑돼지 맛집',
      type: 'restaurant',
      lat: 33.4996,
      lng: 126.5219,
      tags: ['맛집', '제주', '흑돼지'],
      address: '제주특별자치도 제주시 연동',
      popularity: 187
    },
    {
      id: 'place-3',
      name: '바다뷰 카페',
      type: 'cafe',
      lat: 33.2552,
      lng: 126.5585,
      tags: ['카페', '제주', '오션뷰'],
      address: '제주특별자치도 서귀포시 강정동',
      popularity: 156
    }
  ];

  // 장소 선택 핸들러
  const handlePlaceSelect = (place) => {
    setSelectedPlace(place);
    onPlaceSelect && onPlaceSelect(place);
  };

  return (
    <div className="w-full h-64 bg-gray-100 relative overflow-hidden">
      <div className="absolute inset-0 flex items-center justify-center">
        <Map className="w-16 h-16 text-blue-500 opacity-50" />
      </div>
      
      {/* 가상 마커 렌더링 */}
      {samplePlaces.map(place => (
        <div 
          key={place.id}
          className="absolute rounded-full bg-red-500 w-4 h-4 cursor-pointer hover:scale-150 transition-transform"
          style={{
            left: `${((place.lng - jejuCenter.lng) * 100 + 50)}%`,
            top: `${((jejuCenter.lat - place.lat) * 100 + 50)}%`
          }}
          onClick={() => handlePlaceSelect(place)}
          title={place.name}
        />
      ))}
      
      {/* 선택된 장소 정보 */}
      {selectedPlace && (
        <div className="absolute bottom-0 left-0 right-0 bg-white p-2 shadow-lg">
          <h3 className="font-semibold">{selectedPlace.name}</h3>
          <p className="text-sm text-gray-600">{selectedPlace.address}</p>
          <div className="flex mt-1">
            {selectedPlace.tags.map((tag, i) => (
              <span key={i} className="bg-blue-100 text-blue-600 text-xs px-2 rounded mr-1">
                {tag}
              </span>
            ))}
          </div>
        </div>
      )}
    </div>
  );
};

const BlockTravelApp = () => {
  const [blocks, setBlocks] = useState([]);
  const [planSlots, setPlanSlots] = useState([
    { id: 'slot-1', type: 'departure', title: '출발', icon: 'map-pin', block: null },
    { id: 'slot-2', type: 'accommodation', title: '숙소', icon: 'bed', block: null },
    { id: 'slot-3', type: 'morning', title: '오전 관광', icon: 'camera', block: null },
    { id: 'slot-4', type: 'lunch', title: '점심 식사', icon: 'utensils', block: null },
    { id: 'slot-5', type: 'afternoon', title: '오후 관광', icon: 'camera', block: null },
    { id: 'slot-6', type: 'cafe', title: '카페', icon: 'coffee', block: null },
    { id: 'slot-7', type: 'dinner', title: '저녁 식사', icon: 'utensils', block: null }
  ]);
  const [selectedFilter, setSelectedFilter] = useState('all');
  const [transportMode, setTransportMode] = useState('car');
  const [draggedBlock, setDraggedBlock] = useState(null);
  const [hoverSlot, setHoverSlot] = useState(null);
  const [selectedMapPlace, setSelectedMapPlace] = useState(null);

  // 초기 블록 데이터 로드
  useEffect(() => {
    const sampleBlocks = [
      {
        id: 'block-1',
        name: '성산일출봉',
        type: 'tourist_attraction',
        tags: ['관광', '제주', '자연'],
        rating: 5,
        memo: '일출 시간에 방문하기',
        image: '/api/placeholder/240/240',
        popularity: 234
      },
      {
        id: 'block-2',
        name: '제주 흑돼지 맛집',
        type: 'restaurant',
        tags: ['맛집', '제주', '흑돼지'],
        rating: 4,
        memo: '사전 예약 필수',
        image: '/api/placeholder/240/240',
        popularity: 187
      },
      {
        id: 'block-3',
        name: '바다뷰 카페',
        type: 'cafe',
        tags: ['카페', '제주', '오션뷰'],
        rating: 4,
        memo: '노을 시간에 방문 추천',
        image: '/api/placeholder/240/240',
        popularity: 156
      },
      {
        id: 'block-4',
        name: '바다 펜션',
        type: 'lodging',
        tags: ['숙소', '제주', '바다'],
        rating: 4,
        memo: '체크인 15시부터',
        image: '/api/placeholder/240/240',
        popularity: 123
      }
    ];
    setBlocks(sampleBlocks);
  }, []);

  // 지도에서 장소 선택 핸들러
  const handleMapPlaceSelect = (place) => {
    // 지도에서 선택된 장소로 새 블록 생성 로직 추가 가능
    setSelectedMapPlace(place);
  };

  // 나머지 코드는 이전 구현과 동일합니다. 
  // (필터링, 드래그 앤 드롭, 계획 저장 등의 로직)

  // 이전 구현의 렌더링 로직과 동일하되, 맵 영역만 VirtualMap으로 대체
  return (
    <div className="h-screen flex flex-col bg-gray-50">
      <header className="bg-blue-600 text-white p-4 shadow">
        <h1 className="text-xl font-bold text-center">블록 여행</h1>
      </header>
      
      {/* 가상 지도 영역 */}
      <VirtualMap 
        places={blocks} 
        onPlaceSelect={handleMapPlaceSelect} 
      />
      
      {/* 나머지 UI는 이전 구현과 동일 */}
      <div className="flex border-b border-gray-200 mx-4 mt-4">
        <div className="px-4 py-2 font-medium text-blue-600 border-b-2 border-blue-600">내 블록</div>
        <div className="px-4 py-2 text-gray-500">여행 계획</div>
      </div>
      
      {/* 메인 콘텐츠 영역 */}
      {/* (이전 구현의 블록 목록과 계획 템플릿 부분 유지) */}
    </div>
  );
};

export default BlockTravelApp;
